Doing this lab was my first real experience programming in Python, and I actually enjoyed it more than I expected. One of the first things I noticed was how clean and straightforward the syntax is. Compared to C or C++, Python doesn’t have all the curly braces or semicolons, which makes the code easier to write and read. At first, I kept forgetting to rely on indentation since in C/C++ it's not as strict, but in Python it’s everything—if your indentation is off, the program won’t even run. 
What surprised me a bit was how Python lets you write code without worrying about data types. In C/C++, you always have to declare whether something is an int or a float, but in Python, it just works based on what you assign. It makes coding faster, but I also found myself double-checking to make sure I didn’t accidentally pass a string instead of a number or something like that. 
Something I found really convenient was how functions in Python are just simpler to set up. No headers, no main function needed right away—it let me focus more on the logic of the functions themselves, like how to calculate factorials or build the Fibonacci sequence, without getting stuck in setup. 
Comparing Python to C/C++, I think they share the same basic logic—loops, conditionals, functions—but Python is much more beginner-friendly. With C/C++, you're closer to the hardware and you have to manage memory and data types more carefully. That’s useful in some cases, but for general logic-building and quick testing, I can see why Python is so popular.
Overall, this lab helped me understand how Python works and made me more comfortable switching between languages. I liked how it let me focus on solving problems rather than worrying about the strict rules of syntax like I do in C/C++.